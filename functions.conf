function reject_bogon_prefixes()
prefix set bogon_prefixes;
{
  bogon_prefixes = BOGON_PREFIXES;

  if (net ~ bogon_prefixes) then {
    print "Reject: Bogon prefix: ", net, " ", bgp_path;
    reject;
  }
}

function reject_bogon_asns()
int set bogon_asns;
{
  bogon_asns = BOGON_ASNS;

  if ( bgp_path ~ bogon_asns ) then {
    print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
    reject;
  }
}



function reject_transit_paths()
int set transit_asns;
{
        transit_asns = TRANSIT_ASNS;
        if (bgp_path ~ transit_asns) then {
                print "Reject: Transit ASNs found on IXP: ", net, " ", bgp_path;
                reject;
        }
}

function reject_long_aspaths()
{
    if ( bgp_path.len > 10 ) then {
        print "Reject: Too long AS path: ", net, " ", bgp_path;
        reject;
    }
}


function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then {
    bgp_local_pref = 0;
  }
}

function peer_in(int ASN)
{
         # Don't allow peers to flag them selves as transit routes
         bgp_community.delete([(65530,1000)]);

         # Allow single IP blackholing
         if (63350,666) ~ bgp_community || (0,666,ASN) ~ bgp_large_community then
         {
                 if PREFIX_MIN = 24 then
                 {
                        if bgp_path.len = 32 then return true;
                 } else {
                        if bgp_path.len = 128 then return true;
                 }
         }

         # Don't accept too small prefixes
         if net.len > PREFIX_MIN then return false;

         # Set local preference so others don't push routes away
         bgp_local_pref = 100;

         # Filter out bogus ASNs
         if bgp_path ~ [ 0,23456,64496..131071,4200000000..4294967295,142419 ] then return false;

         return true;
}

function transit_in(int ASN)
{
         # Don't accept too small prefixes
         if net.len > PREFIX_MIN then return false;

         # Set local preference so others don't push routes away
         bgp_local_pref = 80;

         # Filter out bogus ASNs
         if bgp_path ~ [ 0,23456,64496..131071,4200000000..4294967295,142419 ] then return false;

         # Don't allow private IP space
         reject_bogon_prefixes();

         # Don't allow upstreams controlling us
         bgp_community.delete([(65530,*)]);
         bgp_large_community.delete([(0,*,*)]);
         bgp_large_community.delete([(RS_ASN,*,*)]);

         # Flag prefix as received over transit
         bgp_community.add((65530,2000));

         return true;
}


function peer_out(int ASN)
{
         # Allow single IP blackholing
         if (63350,666) ~ bgp_community || (0,666,ASN) ~ bgp_large_community then
         {
                 if PREFIX_MIN = 24 then
                 {
                        if bgp_path.len = 32 then return true;
                 } else {
                        if bgp_path.len = 128 then return true;
                 }
         }

         # Don't accept too small prefxes leaking through
         if net.len > PREFIX_MIN then return false;

         # Allow old style DNA
         if ASN < 65536 then
         {
                if (0,ASN) ~ bgp_community then return false;
         }

         # Handle new-style DNA
         if (0,0,ASN) ~ bgp_large_community then return false;

         # Handle path prepending -- Prepend once
         if (0,1,ASN) ~ bgp_large_community then bgp_path.prepend(RS_ASN);

         # Prepend twice
         if (0,2,ASN) ~ bgp_large_community then
         {
                bgp_path.prepend(RS_ASN);
                bgp_path.prepend(RS_ASN);
         }

         # Prepend thrice
         if (0,3,ASN) ~ bgp_large_community then
         {
                bgp_path.prepend(RS_ASN);
                bgp_path.prepend(RS_ASN);
                bgp_path.prepend(RS_ASN);
         }

         return true;
}


function reject_optix_down_short()
int set optix_downpath_short;
{
  optix_downpath_short = OPTIX_D_ASN_SHORT;
	if ( bgp_path ~ OPTIX_D_ASN_SHORT ) then {
		if ( bgp_path.len >= 3 ) then {
			print "Reject: Transit Path Exceeded AS_PATH: ", net, " ", bgp_path;
		reject;
		}
	}
}
function reject_optix_down_long()
int set optix_downpath_long;
{
  optix_downpath_long = OPTIX_D_ASN_LONG;
	if ( bgp_path ~ OPTIX_D_ASN_LONG ) then {
		if ( bgp_path.len > 8 ) then {
			print "Reject: Transit Path Exceeded AS_PATH: ", net, " ", bgp_path;
		reject;
		}
	}
}

function transit_out(int ASN)
{
         # Don't export too small routes
         if net.len > PREFIX_MIN then return false;
		 
			reject_optix_down_short();
			reject_optix_down_long();
			reject_long_aspaths();

         # Allow old style DNA
         if ASN < 65536 then
         {
                if (0,ASN) ~ bgp_community then return false;
         }

         # Handle new-style DNA
         if (0,0,ASN) ~ bgp_large_community then return false;

         # Only allow routes tagged for export
         if ((65530,1000)) ~ bgp_community then return true;

         # Deny everything else
         return false;
}
